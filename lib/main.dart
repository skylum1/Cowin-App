import 'dart:convert';
import 'package:flutter/rendering.dart';
import 'package:intl/intl.dart';
import 'package:flutter/material.dart';
import 'struct.dart';
import 'package:http/http.dart' as http;
import 'dart:async';
// import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Covid  Vaccine Tracker',
      theme: ThemeData.dark(),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  TextEditingController dateController = TextEditingController();
  TextEditingController textController = TextEditingController();
  DateTime date;
  List<Centers> _free = [], _paid = [];
  List<past> available = [];
  double counter = 0;
  bool success = true;
  int xSec = 2;
  var swatch = Stopwatch();
  bool _istop = false;
  void starttimer(int sec) {
    Timer(Duration(seconds: sec), keeprunning);
  }

  void keeprunning() {
    print('aaa');
    if (swatch.isRunning) {
      starttimer(xSec == null ? 5 : xSec);
    }
    if (_istop) {
      swatch.start();
      starttimer(xSec == null ? 5 : xSec);
    } else {
      swatch.reset();
      swatch.stop();
    }
    _getCenters();
  }

  void _getCenters() async {
    _free = [];
    _paid = [];
    String time;
    if (date != null) {
      time = date.day.toString().padLeft(2, '0') +
          '-' +
          date.month.toString().padLeft(2, '0') +
          '-' +
          date.year.toString();
    } else {
      time = DateTime.now().day.toString().padLeft(2, '0') +
          '-' +
          DateTime.now().month.toString().padLeft(2, '0') +
          '-' +
          DateTime.now().year.toString();
    }

    var data = await http.get(Uri.parse(
        "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByDistrict?district_id=199&date=$time"));
    if (data.statusCode > 300) {
      success = false;
      return;
    }
    success = true;
    var jsonData = json.decode(data.body);
    Autogenerated dec = Autogenerated();
    dec = Autogenerated.fromJson(jsonData);
    List<Centers> freecenters = [];
    List<Centers> paidcenters = [];
    bool added = false;
    for (int i = 0; i < dec.centers.length; i++) {
      added = false;
      for (int j = 0; j < dec.centers[i].sessions.length; j++) {
        if (dec.centers[i].sessions[j].availableCapacity >= 2 &&
            dec.centers[i].sessions[j].minAgeLimit == 18 &&
            !added) {
          available.add(past(center: dec.centers[i], dateTime: DateTime.now()));
          added = true;
        }
        if (dec.centers[i].sessions[j].minAgeLimit == 18 &&
            (dec.centers[i].sessions[j].availableCapacity >= 2 ||
                dec.centers[i].sessions[j].availableCapacityDose1 >= 2)) {
          if (dec.centers[i].feeType == "Paid")
            paidcenters.add(dec.centers[i]);
          else
            freecenters.add(dec.centers[i]);
          break;
        }
      }
    }
    setState(() {
      _free = freecenters;
      _paid = paidcenters;
    });
    // print(DateTime.now());
    print(jsonData);
  }

  Widget _buildavailable(BuildContext context) {
    if (available.length == 0)
      return Center(
        child: Text('No available !'),
      );

    return ListView.separated(
        separatorBuilder: (context, index) {
          return SizedBox(
            height: 5,
          );
        },
        physics: BouncingScrollPhysics(),
        itemCount: available.length,
        itemBuilder: (context, index) {
          return Card(
            color: Colors.deepPurple,
            elevation: 2,
            shadowColor: Colors.deepPurpleAccent,
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            child: Padding(
              padding: const EdgeInsets.all(4.0),
              child: Row(
                children: [
                  Text(DateFormat('hh:mm:ss a', 'en_US')
                      .format(available[index].dateTime)),
                  SizedBox(
                    width: 10,
                  ),
                  Wrap(
                    children: [
                      Container(
                        padding: EdgeInsets.only(top: 5, bottom: 5),
                        width: 50,
                        child: Text(available[index].center.pincode.toString()),
                      ),
                    ],
                  ),
                  SizedBox(
                    width: 20,
                  ),
                  Wrap(children: [Text(available[index].center.name)]),
                  SizedBox(
                    width: 20,
                  ),
                  Text(available[index].center.sessions.length > 0
                      ? available[index]
                          .center
                          .sessions[0]
                          .availableCapacity
                          .toString()
                      : 'NA'),
                ],
              ),
            ),
          );
        });
  }

  Widget _buildfree(BuildContext context) {
    if (_free.length == 0)
      return Center(
        child: Text('No available !'),
      );

    return ListView.separated(
        separatorBuilder: (context, index) {
          return SizedBox(
            height: 2,
          );
        },
        physics: BouncingScrollPhysics(),
        itemCount: _free.length,
        itemBuilder: (context, index) {
          return Card(
            color: Colors.deepPurple,
            elevation: 2,
            shadowColor: Colors.deepPurpleAccent,
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            child: Padding(
              padding: const EdgeInsets.all(4.0),
              child: Row(
                children: [
                  Wrap(
                    children: [
                      Container(
                        padding: EdgeInsets.only(top: 5, bottom: 5),
                        width: 50,
                        child: Text(_free[index].pincode.toString()),
                      ),
                    ],
                  ),
                  SizedBox(
                    width: 20,
                  ),
                  Wrap(children: [Text(_free[index].name)]),
                  SizedBox(
                    width: 20,
                  ),
                  Text(_free[index].sessions.length > 0
                      ? _free[index]
                          .sessions[0]
                          .availableCapacityDose2
                          .toString()
                      : 'NA'),
                ],
              ),
            ),
          );
        });
  }

  Widget _buildpaid(BuildContext context) {
    if (_paid.length == 0)
      return Center(
        child: Text('No available !'),
      );

    return ListView.separated(
        separatorBuilder: (context, index) {
          return SizedBox(
            height: 2,
          );
        },
        physics: BouncingScrollPhysics(),
        itemCount: _paid.length,
        itemBuilder: (context, index) {
          return Card(
            color: Colors.deepPurple,
            elevation: 2,
            shadowColor: Colors.deepPurpleAccent,
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
            child: Padding(
              padding: const EdgeInsets.all(4.0),
              child: Row(
                children: [
                  Wrap(
                    children: [
                      Container(
                        padding: EdgeInsets.only(top: 5, bottom: 5),
                        width: 50,
                        child: Text(_paid[index].pincode.toString()),
                      ),
                    ],
                  ),
                  SizedBox(
                    width: 20,
                  ),
                  Text(_paid[index].name),
                ],
              ),
            ),
          );
        });
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
        child: Scaffold(
      resizeToAvoidBottomInset: false,
      floatingActionButton: FloatingActionButton(
          child: Icon(_istop ? Icons.pause : Icons.play_arrow),
          onPressed: () {
            setState(() {
              _istop = !_istop;
            });
            keeprunning();
            // Timer.periodic(Duration(seconds: xSec == null ? 5 : xSec), (timer) {
            //   if (success && _istop) {
            //     counter++;
            //     _getCenters();
            //   } else {
            //     ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            //         content:
            //             Text('Timeout has occurred, try after sometime!')));
            //     timer.cancel();
            //     setState(() {
            //       _istop = false;
            //     });
            //   }
            // });
          }),
      body: Container(
        child: Column(
          children: [
            Row(
              children: [
                MyTooltip(
                  message:
                      'Date from which vaccine will be checked within 7 days ',
                  child: Container(
                    padding: EdgeInsets.all(10),
                    child: Text(
                      'Date : ',
                      style: TextStyle(color: Colors.white),
                    ),
                    margin: EdgeInsets.all(10),
                    decoration: BoxDecoration(
                        color: Colors.black38,
                        borderRadius: BorderRadius.circular(10)),
                  ),
                ),
                Expanded(
                  child: Container(
                      child: TextField(
                    style: TextStyle(color: Colors.white),
                    readOnly: true,
                    controller: dateController,
                    onTap: () {
                      showDatePicker(
                              context: context,
                              initialDate: DateTime.now(),
                              firstDate: DateTime(1900),
                              lastDate: DateTime(2200))
                          .then((date) {
                        setState(() {
                          dateController.text = date.day.toString() +
                              '-' +
                              date.month.toString().padLeft(2, '0') +
                              '-' +
                              date.year.toString();
                          this.date = date;
                        });
                      });
                    },
                  )),
                ),
                MyTooltip(
                  message: 'Number of seconds to wait after each request',
                  child: Container(
                    padding: EdgeInsets.all(10),
                    child: Text(
                      'Interval: ',
                      style: TextStyle(color: Colors.white),
                    ),
                    margin: EdgeInsets.all(10),
                    decoration: BoxDecoration(
                        color: Colors.black38,
                        borderRadius: BorderRadius.circular(10)),
                  ),
                ),
                Expanded(
                  child: Container(
                      child: TextField(
                    autofocus: true,
                    keyboardType: TextInputType.number,
                    style: TextStyle(color: Colors.white),
                    controller: textController,
                    onEditingComplete: () {
                      setState(() {
                        xSec = num.tryParse(textController.text);
                      });
                      FocusScope.of(context).unfocus();
                    },
                  )),
                ),
                Container(
                  padding: EdgeInsets.all(10),
                  child: Text('${counter.toInt().toString()}',
                      style: TextStyle(color: Colors.green, fontSize: 15)),
                  margin: EdgeInsets.all(10),
                  decoration: BoxDecoration(
                      color: Colors.black38,
                      borderRadius: BorderRadius.circular(10)),
                ),
              ],
            ),
            SizedBox(
              height: 10,
            ),
            // Row(
            //   children: [
            //     Container(
            //       padding: EdgeInsets.all(10),
            //       child: Text(
            //         'Number of Requests : ',
            //         style: TextStyle(color: Colors.white),
            //       ),
            //       margin: EdgeInsets.all(10),
            //       decoration: BoxDecoration(
            //           color: Colors.black38,
            //           borderRadius: BorderRadius.circular(10)),
            //     ),
            //     Container(
            //       padding: EdgeInsets.all(10),
            //       child: Text('${counter.toInt().toString()}',
            //           style: TextStyle(color: Colors.green, fontSize: 15)),
            //       margin: EdgeInsets.all(10),
            //       decoration: BoxDecoration(
            //           color: Colors.black38,
            //           borderRadius: BorderRadius.circular(10)),
            //     ),
            //     // MyTooltip(
            //     //   message: 'Minimum age requirement',
            //     //   child: Container(
            //     //     padding: EdgeInsets.all(10),
            //     //     child: Text(
            //     //       'Age: ',
            //     //       style: TextStyle(color: Colors.white),
            //     //     ),
            //     //     margin: EdgeInsets.all(10),
            //     //     decoration: BoxDecoration(
            //     //         color: Colors.black38,
            //     //         borderRadius: BorderRadius.circular(10)),
            //     //   ),
            //     // ),
            //     // Container(
            //     //     child: ),
            //   ],
            // ),
            Column(
              children: [
                Container(
                  padding: EdgeInsets.all(10),
                  child: Text(
                    'Free Vaccines',
                    style: TextStyle(fontSize: 18, color: Colors.white),
                  ),
                  margin: EdgeInsets.all(10),
                  decoration: BoxDecoration(
                      color: Colors.black38,
                      borderRadius: BorderRadius.circular(10)),
                ),
                SizedBox(
                  height: 5,
                ),
                Container(
                    height: 100, child: Container(child: _buildfree(context)))
              ],
            ),
            SizedBox(
              height: 8,
            ),
            Column(
              children: [
                Container(
                  padding: EdgeInsets.all(10),
                  child: Text(
                    'Paid Vaccines',
                    style: TextStyle(fontSize: 18, color: Colors.white),
                  ),
                  margin: EdgeInsets.all(10),
                  decoration: BoxDecoration(
                      color: Colors.black38,
                      borderRadius: BorderRadius.circular(10)),
                ),
                SizedBox(
                  height: 5,
                ),
                Container(
                    height: 100, child: Container(child: _buildpaid(context)))
              ],
            ),
            Expanded(
                child: Container(
              child: Column(
                children: [
                  MyTooltip(
                    message:
                        'Shows the time with pincode when vaccine were available',
                    child: Container(
                      padding: EdgeInsets.all(10),
                      child: Text(
                        'Past Available times',
                        style: TextStyle(fontSize: 18, color: Colors.white),
                      ),
                      margin: EdgeInsets.all(10),
                      decoration: BoxDecoration(
                          color: Colors.black38,
                          borderRadius: BorderRadius.circular(10)),
                    ),
                  ),
                  SizedBox(height: 8),
                  Expanded(child: Container(child: _buildavailable(context))),
                ],
              ),
            ))
          ],
        ),
      ),
    ));
  }
}

class MyTooltip extends StatelessWidget {
  final Widget child;
  final String message;

  MyTooltip({@required this.message, @required this.child});

  @override
  Widget build(BuildContext context) {
    final key = GlobalKey<State<Tooltip>>();
    return Tooltip(
      key: key,
      message: message,
      child: GestureDetector(
        behavior: HitTestBehavior.opaque,
        onTap: () => _onTap(key),
        child: child,
      ),
    );
  }

  void _onTap(GlobalKey key) {
    final dynamic tooltip = key.currentState;
    tooltip?.ensureTooltipVisible();
  }
}
